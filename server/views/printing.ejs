<!DOCTYPE html>
<html lang="<%= locale %>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= __('print_title') %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/styles/Header.css"/>
    <link rel="stylesheet" href="/styles/Footer.css"/>
    <link rel="stylesheet" href="/styles/Buttons.css"/>
    <!-- PDF.js library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script>pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';</script>
    <style>
        .preview-container {
            margin: 20px 0;
            max-width: 100%;
            overflow: hidden;
        }
        #preview-canvas {
            border: 1px solid #ddd;
            margin: 10px 0;
            max-width: 100%;
            height: auto;
        }
        .preview-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin: 10px 0;
        }
        .preview-controls button {
            padding: 5px 15px;
        }
        .page-number {
            margin: 0 10px;
        }
        /* Custom file input styling */
        .custom-file-input::-webkit-file-upload-button {
            visibility: hidden;
            width: 0;
        }
        .custom-file-input::before {
            content: '<%= __("choose_file") %>';
            display: inline-block;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px 12px;
            outline: none;
            white-space: nowrap;
            cursor: pointer;
            font-weight: 500;
            margin-right: 10px;
        }
        .custom-file-input:hover::before {
            background: #0056b3;
        }
        .custom-file-input:active::before {
            background: #0056b3;
        }
        .file-types-hint {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 0.25rem;
        }
    </style>
    <%- include('./partials/favicon') %>
<script>
    let totalPages = 0;
    let pdfDoc = null;
    let currentPage = 1;
    let isAuthorized = false;
    let printPagesInput;

    // Check if user is authorized
    async function checkAuthorization() {
        try {
            const response = await fetch('/api/cart/data');
            isAuthorized = response.ok;
        } catch (error) {
            isAuthorized = false;
        }
    }

    // Initialize PDF preview
    async function initPreview(file) {
        if (!file || !isAuthorized) return;
        
        const previewSection = document.getElementById('preview-section');
        
        try {
            if (file.type.includes('pdf')) {
                // Handle PDF files directly
                const fileReader = new FileReader();
                fileReader.onload = async function() {
                    try {
                        pdfDoc = await pdfjsLib.getDocument({data: this.result}).promise;
                        totalPages = pdfDoc.numPages;
                        document.getElementById('total-pages').textContent = totalPages;
                        previewSection.style.display = 'block';
                        renderPage(1);
                    } catch (error) {
                        console.error('Error loading PDF:', error);
                    }
                };
                fileReader.readAsArrayBuffer(file);
            } else if (file.type.includes('msword') || file.type.includes('wordprocessingml')) {
                // Handle DOC/DOCX files by getting converted PDF data
                const formData = new FormData();
                formData.append('document', file);

                const response = await fetch('/api/get-file-info', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.success && data.pdfData) {
                    // Convert base64 to ArrayBuffer
                    const binaryString = window.atob(data.pdfData);
                    const bytes = new Uint8Array(binaryString.length);
                    for (let i = 0; i < binaryString.length; i++) {
                        bytes[i] = binaryString.charCodeAt(i);
                    }
                    
                    try {
                        pdfDoc = await pdfjsLib.getDocument({data: bytes.buffer}).promise;
                        totalPages = pdfDoc.numPages;
                        document.getElementById('total-pages').textContent = totalPages;
                        previewSection.style.display = 'block';
                        renderPage(1);
                    } catch (error) {
                        console.error('Error loading converted PDF:', error);
                    }
                }
            } else {
                previewSection.style.display = 'none';
            }
        } catch (error) {
            console.error('Error in preview initialization:', error);
            previewSection.style.display = 'none';
        }
    }

    // Render PDF page
    async function renderPage(pageNumber) {
        if (!pdfDoc) return;

        try {
            const page = await pdfDoc.getPage(pageNumber);
            const canvas = document.getElementById('preview-canvas');
            const context = canvas.getContext('2d');
            
            const viewport = page.getViewport({scale: 1.5});
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            await page.render({
                canvasContext: context,
                viewport: viewport
            }).promise;

            currentPage = pageNumber;
            document.getElementById('current-page').textContent = currentPage;
        } catch (error) {
            console.error('Error rendering page:', error);
        }
    }

    // Update file info and initialize preview
    async function updateFileInfo() {
        const fileInput = document.getElementById('document');
        const fileInfo = document.getElementById('fileInfo');
        const pagesInput = document.getElementById('pages');
        const printPagesInput = document.getElementById('print_pages');
        const totalDocumentPagesInput = document.getElementById('totalDocumentPages');

        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            fileInfo.textContent = "<%= __('file_name') %>: " + file.name + ", <%= __('file_size') %>: " + (file.size / 1024).toFixed(2) + " KB";

            pagesInput.value = "<%= __('detecting') %>";
            
            // Initialize preview for authorized users
            await checkAuthorization();
            if (isAuthorized) {
                await initPreview(file);
            }

            // Get file info without authorization check
            fetch('/api/get-file-info', {
                method: 'POST',
                body: new FormData(document.getElementById('printForm'))
            })
            .then(response => response.json())
            .then(data => {
                totalPages = data.pages || 0;
                totalDocumentPagesInput.value = totalPages; // Store total pages
                if (!printPagesInput.value.trim()) {
                    pagesInput.value = "<%= __('pages_all') %> (" + totalPages + " <%= __('pages') %>)";
                } else {
                    pagesInput.value = totalPages || "<%= __('unknown') %>";
                }
            })
            .catch(() => {
                totalPages = 0;
                pagesInput.value = "<%= __('error_retrieving_pages') %>";
            });
        } else {
            fileInfo.textContent = '';
            pagesInput.value = '';
            totalPages = 0;
            document.getElementById('preview-section').style.display = 'none';
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        const printForm = document.getElementById('printForm');
        const unauthorizedMessage = document.getElementById('unauthorized-message');
        printPagesInput = document.getElementById('print_pages');

        printForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            // Validate page range first
            const pagesField = document.getElementById('print_pages').value.trim();
            const errorDiv = document.getElementById('print_pages_error');
            printPagesInput.classList.remove('is-invalid');
            errorDiv.textContent = '';

            if (pagesField && totalPages > 0) {
                const ranges = pagesField.split(',').map(part => part.trim());
                const valid = ranges.every(range => {
                    if (/^\d+$/.test(range)) {
                        const page = parseInt(range);
                        return page >= 1 && page <= totalPages;
                    } else if (/^\d+-\d+$/.test(range)) {
                        const [start, end] = range.split('-').map(Number);
                        return start >= 1 && end <= totalPages && start <= end;
                    }
                    return false;
                });

                if (!valid) {
                    printPagesInput.classList.add('is-invalid');
                    errorDiv.textContent = "<%= __('invalid_page_range') %> (<%= __('max_pages') %> " + totalPages + ")";
                    return;
                }
            }

            // Check authorization only when submitting
            try {
                const response = await fetch('/api/cart/data');
                if (response.ok) {
                    // User is logged in, submit the form
                    this.submit();
                } else {
                    // User is not logged in, show error message
                    unauthorizedMessage.style.display = 'block';
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
            } catch (error) {
                console.error('Error checking authentication:', error);
                unauthorizedMessage.style.display = 'block';
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        });

        // Add event listeners for preview navigation
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');

        prevButton.addEventListener('click', () => {
            if (currentPage > 1) {
                renderPage(currentPage - 1);
            }
        });

        nextButton.addEventListener('click', () => {
            if (currentPage < totalPages) {
                renderPage(currentPage + 1);
            }
        });

        // Add event listener for print_pages input
        printPagesInput.addEventListener('input', function() {
            if (!this.value.trim()) {
                if (totalPages > 0) {
                    pagesInput.value = "<%= __('all') %> (" + totalPages + " <%= __('pages') %>)";
                }
            }
        });
    });
</script>
</head>
<body>
<%- include('./partials/header') %>

<div class="container py-5">
    <h1 class="text-center mb-4"><%= __('print_heading') %></h1>

    <div id="unauthorized-message" style="display: none;">
        <%- include('./partials/unauthorized-alert') %>
    </div>

    <form id="printForm" action="/print" method="POST" enctype="multipart/form-data" class="mx-auto" style="max-width: 600px;">
        <input type="hidden" id="totalDocumentPages" name="totalDocumentPages" value="0">
        
        <div class="mb-3">
            <label for="document" class="form-label"><%= __('upload_document') %>:</label>
            <input type="file" 
                   class="form-control custom-file-input" 
                   id="document" 
                   name="document" 
                   accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" 
                   required 
                   onchange="updateFileInfo()">
            <div class="file-types-hint">
                <%= __('supported_formats') %>: PDF, DOC, DOCX, JPG, JPEG, PNG
            </div>
            <small id="fileInfo" class="form-text text-muted mt-1"></small>
        </div>

        <!-- Preview section -->
        <div id="preview-section" style="display: none;">
            <div class="preview-container">
                <canvas id="preview-canvas"></canvas>
                <div class="preview-controls">
                    <button type="button" class="btn btn-secondary" id="prev-page">Previous</button>
                    <span class="page-number">Page <span id="current-page">1</span> of <span id="total-pages">1</span></span>
                    <button type="button" class="btn btn-secondary" id="next-page">Next</button>
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label for="pages" class="form-label"><%= __('number_of_pages') %>:</label>
            <input type="text" class="form-control" id="pages" name="pages" readonly>
        </div>

        <div class="mb-3">
            <label for="print_pages" class="form-label"><%= __('pages_to_print') %>:</label>
            <input type="text" class="form-control" id="print_pages" name="print_pages" placeholder="<%= __('print_pages_placeholder') %>">
            <div id="print_pages_error" class="invalid-feedback"></div>
        </div>

        <div class="mb-3">
            <label for="copies" class="form-label"><%= __('number_of_copies') %>:</label>
            <input type="number" class="form-control" id="copies" name="copies" min="1" value="1" required>
        </div>

        <div class="mb-3">
            <label for="color" class="form-label"><%= __('color_mode') %>:</label>
            <select id="color" name="color" class="form-select">
                <option value="black_white"><%= __('black_white') %></option>
                <option value="color"><%= __('Color_mode') %></option>
            </select>
        </div>

        <div class="mb-3">
            <label for="paper_size" class="form-label"><%= __('paper_size') %>:</label>
            <select id="paper_size" name="paper_size" class="form-select">
                <option value="A4">A4</option>
                <option value="A3">A3</option>
                <option value="Letter">Letter</option>
            </select>
        </div>

        <div class="form-check mb-4">
            <input class="form-check-input" type="checkbox" id="double_sided" name="double_sided">
            <label class="form-check-label" for="double_sided">
                <%= __('double_sided_printing') %>
            </label>
        </div>

        <button type="submit" class="btn w-100">
            <%= __('print_button') %>
        </button>
    </form>
</div>

<%- include('./partials/footer') %>

<!-- Bootstrap JS (optional for dropdowns, modals, etc.) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

