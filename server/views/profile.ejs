<!DOCTYPE html>
<html lang="<%= locale %>">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%= __('profile_title') %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="/styles/Profile.css" />
  <link rel="stylesheet" href="/styles/Header.css" />
  <link rel="stylesheet" href="/styles/Buttons.css" />
  <link rel="stylesheet" href="/styles/Footer.css" />
  <%- include('./partials/favicon') %>
</head>
<body>
  <%- include('./partials/header'); %>

  <main>
    <div class="container py-4">
      <div class="row g-4">
        <div class="col-md-12">
          <div class="profile-section">
            <div class="profile-header d-flex align-items-center justify-content-between">
              <div class="d-flex align-items-center gap-4">
                <div class="profile-avatar">
                  <% if (avatar) { %>
                    <img src="<%= avatar %>" alt="Avatar" class="img-fluid rounded-circle">
                  <% } else { %>
                    <div class="avatar-fallback d-flex justify-content-center align-items-center rounded-circle bg-secondary text-white" style="width: 100px; height: 100px; font-size: 36px;">
                      <%= user.initials %>
                    </div>
                  <% } %>
                </div>
                <div>
                  <h2><%= user.name %></h2>
                  <p class="mb-0 text-muted">
                    <%= __('joined') %>: 
                    <span id="joinedDate" data-date="<%= user.created_at %>"></span>
                  </p>
                </div>
              </div>
            </div>

            <div class="border-bottom mb-3 mt-3">
              <nav class="nav nav-tabs">
                <a href="#profile" class="nav-link active" data-bs-toggle="tab"><%= __('profile_tab') %></a>
                <a href="#orders" class="nav-link" data-bs-toggle="tab"><%= __('orders_tab') %></a>
                <a href="#cart" class="nav-link" data-bs-toggle="tab"><%= __('cart_tab') %></a>
              </nav>
            </div>

            <div class="tab-content">
              <div id="profile" class="tab-pane fade show active">
                <form id="profileForm" enctype="multipart/form-data">
                  <div class="row g-3">
                    <div class="col-md-6">
                      <label class="form-label"><%= __('email') %></label>
                      <input type="email" 
                             name="email" 
                             class="form-control editable-input" 
                             value="<%= user.email %>" 
                             pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
                             title="<%= __('email_validation_message') %>"
                             readonly>
                      <div class="invalid-feedback"></div>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label"><%= __('phone') %></label>
                      <input type="tel" 
                             name="phone" 
                             class="form-control editable-input" 
                             value="<%= user.phone %>" 
                             pattern="^\+?[1-9][0-9]{7,14}$"
                             title="<%= __('phone_validation_message') %>"
                             readonly>
                      <div class="invalid-feedback"></div>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label"><%= __('address') %></label>
                      <input type="text" 
                             name="adress" 
                             class="form-control editable-input" 
                             value="<%= user.adress %>" 
                             minlength="5"
                             maxlength="200"
                             title="<%= __('address_validation_message') %>"
                             readonly>
                      <div class="invalid-feedback"></div>
                    </div>
                    <div class="col-md-6">
                      <label for="avatar" class="form-label"><%= __('change_avatar') %></label>
                      <input type="file" name="avatar" id="avatar" accept="image/*" class="form-control">
                      <button type="button" id="uploadAvatarBtn" class="btn">
                        <%= __('upload') %>
                      </button>
                      <div class="progress d-none mt-2" id="avatarUploadProgress">
                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                      </div>
                    </div>
                  </div>

                  <div class="d-flex gap-2 mt-3">
                    <button id="editBtn" class="btn" type="button"><%= __('edit') %></button>
                    <button type="submit" id="saveBtn" class="btn d-none"><%= __('save') %></button>
                    <button type="button" id="cancelBtn" class="btn  d-none"><% __('cancel') %></button>
                  </div>
                </form>
              </div>

              <div id="cart" class="tab-pane fade">
                <div id="cartMessages"></div>
                <div id="cartContent">
                  <div class="text-center mt-4">
                    <p class="mb-3"><%= __('loading_cart') %></p>
                  </div>
                </div>
              </div>

              <div id="orders" class="tab-pane fade">
                <div id="ordersMessages"></div>
                <div id="ordersContent">
                  <div class="text-center mt-4">
                    <p class="mb-3"><%= __('loading_orders') %></p>
                  </div>
                </div>
              </div>
            </div>

            <div id="statusMessage" class="alert d-none mt-3" role="alert"></div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <%- include('./partials/footer'); %>

  <script>
    // Format date according to locale
    function formatDate(dateString, locale) {
      try {
        const date = new Date(dateString);
        return new Intl.DateTimeFormat(locale, {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }).format(date);
      } catch (error) {
        console.error('Error formatting date:', error);
        return dateString;
      }
    }

    // Add this helper function at the start of your script section
    function formatPrice(price) {
      if (typeof price === 'string') {
        price = parseFloat(price);
      }
      return typeof price === 'number' && !isNaN(price) ? price.toFixed(2) : '0.00';
    }

    document.addEventListener("DOMContentLoaded", function () {
      // Format joined date
      const joinedDateElement = document.getElementById('joinedDate');
      if (joinedDateElement) {
        const dateString = joinedDateElement.getAttribute('data-date');
        const locale = document.documentElement.lang || 'en';
        joinedDateElement.textContent = formatDate(dateString, locale);
      }

      // Save initial user data
      const userData = JSON.parse('<%- JSON.stringify(user) %>');
      let originalValues = {};

      // Function to restore user data from the original values
      function restoreUserData() {
        const inputs = document.querySelectorAll(".editable-input");
        inputs.forEach(input => {
          input.value = userData[input.name] || '';
        });
      }

      function enableEdit() {
        const inputs = document.querySelectorAll(".editable-input");
        originalValues = {};

        inputs.forEach(input => {
          originalValues[input.name] = input.value;
          input.removeAttribute("readonly");
        });

        document.getElementById("editBtn").classList.add("d-none");
        document.getElementById("saveBtn").classList.remove("d-none");
        document.getElementById("cancelBtn").classList.remove("d-none");
      }

      function cancelEdit() {
        const inputs = document.querySelectorAll(".editable-input");

        inputs.forEach(input => {
          input.value = originalValues[input.name];
          input.setAttribute("readonly", true);
        });

        document.getElementById("editBtn").classList.remove("d-none");
        document.getElementById("saveBtn").classList.add("d-none");
        document.getElementById("cancelBtn").classList.add("d-none");
      }

      function showStatusMessage(message, isSuccess = true) {
        const statusDiv = document.getElementById("statusMessage");
        statusDiv.classList.remove("d-none", "alert-success", "alert-danger");
        statusDiv.classList.add(isSuccess ? "alert-success" : "alert-danger");
        statusDiv.textContent = message;
        
        // Hide the message after 5 seconds
        setTimeout(() => {
          statusDiv.classList.add("d-none");
        }, 5000);
      }

      // Initialize event listeners
      document.getElementById("editBtn").addEventListener("click", enableEdit);
      document.getElementById("cancelBtn").addEventListener("click", cancelEdit);

      const form = document.getElementById("profileForm");
      
      function validateInput(input) {
        const isValid = input.checkValidity();
        const feedback = input.nextElementSibling;
        
        if (!isValid) {
          input.classList.add('is-invalid');
          feedback.textContent = input.title;
          feedback.style.display = 'block';
        } else {
          input.classList.remove('is-invalid');
          feedback.style.display = 'none';
        }
        
        return isValid;
      }

      function validateForm() {
        const inputs = form.querySelectorAll('.editable-input:not([readonly])');
        let isValid = true;
        
        inputs.forEach(input => {
          if (!validateInput(input)) {
            isValid = false;
          }
        });
        
        return isValid;
      }

      // Add validation on input
      form.querySelectorAll('.editable-input').forEach(input => {
        input.addEventListener('input', () => validateInput(input));
      });

      form.addEventListener("submit", async function (e) {
        e.preventDefault();

        if (!validateForm()) {
          showStatusMessage('<%= __("validation_error") %>', false);
          return;
        }

        const formData = new FormData(form);

        try {
          const response = await fetch("/api/users", {
            method: "PUT",
            body: formData,
          });

          const result = await response.json();

          if (response.ok) {
            // Update userData with new values
            Object.assign(userData, Object.fromEntries(formData));
            showStatusMessage("Profile updated successfully!", true);
            setTimeout(() => location.reload(), 1500);
          } else {
            // Handle specific validation errors
            if (result.error === 'email_exists') {
              showStatusMessage('<%= __("email_exists") %>', false);
            } else if (result.error === 'invalid_email') {
              showStatusMessage('<%= __("invalid_email") %>', false);
            } else if (result.error === 'invalid_phone') {
              showStatusMessage('<%= __("invalid_phone") %>', false);
            } else if (result.error === 'invalid_address') {
              showStatusMessage('<%= __("invalid_address") %>', false);
            } else {
              showStatusMessage(result.error || "An error occurred.", false);
            }
          }
        } catch (error) {
          console.error("Error:", error);
          showStatusMessage("An error occurred while updating your profile.", false);
        }
      });

      // Avatar upload handling
      document.getElementById('uploadAvatarBtn').addEventListener('click', async function() {
        const fileInput = document.getElementById('avatar');
        const file = fileInput.files[0];
        const progressBar = document.getElementById('avatarUploadProgress');
        const progressBarInner = progressBar.querySelector('.progress-bar');
        
        if (!file) {
          showStatusMessage('Please select a file first', false);
          return;
        }

        const formData = new FormData();
        formData.append('avatar', file);

        try {
          // Show progress bar
          progressBar.classList.remove('d-none');
          progressBarInner.style.width = '0%';

          const response = await fetch('/upload-avatar', {
            method: 'POST',
            body: formData,
            credentials: 'include'
          });

          // First check if response is JSON
          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Server returned unexpected response');
          }

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.message || 'Upload failed');
          }

          progressBarInner.style.width = '100%';
          showStatusMessage('Avatar updated successfully! Page will refresh in 2 seconds...', true);
          setTimeout(() => {
            location.reload();
          }, 2000);
          
          // Update avatar preview without page reload
          const avatarImg = document.querySelector('.profile-avatar img');
          if (avatarImg) {
            avatarImg.src = result.avatarUrl + '?' + new Date().getTime(); // Cache bust
          } else {
            // Handle case where fallback avatar is shown
            location.reload();
          }
          
        } catch (error) {
          progressBar.classList.add('d-none');
          showStatusMessage(error.message || 'Avatar upload failed', false);
          console.error('Upload error:', error);
        }
      });

      // Tab switching behavior
      const tabs = document.querySelectorAll('[data-bs-toggle="tab"]');
      tabs.forEach(tab => {
        tab.addEventListener("shown.bs.tab", function (event) {
          const activeTab = event.target.getAttribute("href");
          const editBtn = document.getElementById("editBtn");
          if (activeTab === "#profile") {
            editBtn.classList.remove("d-none");
            restoreUserData(); // Restore user data when switching back to profile tab
          } else {
            editBtn.classList.add("d-none");
            cancelEdit(); // Automatically cancel edit if user navigates away
          }
        });
      });

      // Initial data setup
      restoreUserData();
    });

    // Handle cart tab activation
    document.addEventListener('DOMContentLoaded', function() {
      // Get only the tab links within the profile tabs navigation
      const tabLinks = document.querySelectorAll('.nav.nav-tabs .nav-link');
      
      // Function to activate a specific tab
      function activateTab(tabId) {
        // Remove active class from all tabs
        tabLinks.forEach(link => {
          link.classList.remove('active');
          // Get the tab pane using the href attribute which contains the tab ID
          const paneId = link.getAttribute('href');
          const pane = document.querySelector(paneId);
          if (pane) {
            pane.classList.remove('show', 'active');
          }
        });

        // Activate the specified tab
        const targetLink = document.querySelector(`.nav.nav-tabs .nav-link[href="#${tabId}"]`);
        if (targetLink) {
          targetLink.classList.add('active');
          const targetPane = document.querySelector(`#${tabId}`);
          if (targetPane) {
            targetPane.classList.add('show', 'active');
          }
        }
      }

      // Check if we need to activate the cart tab
      const hash = window.location.hash.replace('#', '');
      if (hash || '<%= activeTab %>' === 'cart') {
        activateTab(hash || 'cart');
      }

      // Handle tab clicks
      tabLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          // Only prevent default for tab links
          if (link.getAttribute('href').startsWith('#')) {
            e.preventDefault();
            const tabId = this.getAttribute('href').substring(1);
            activateTab(tabId);
            // Update URL hash without scrolling
            history.pushState(null, null, `#${tabId}`);
          }
        });
      });

      // Handle browser back/forward
      window.addEventListener('hashchange', function() {
        const tabId = window.location.hash.substring(1) || 'profile';
        if (['profile', 'orders', 'cart'].includes(tabId)) {
          activateTab(tabId);
        }
      });
    });

    // Cart functionality
    async function loadCartData() {
      try {
        const response = await fetch('/api/cart/data');
        const data = await response.json();
        
        // Update messages
        const messagesDiv = document.getElementById('cartMessages');
        messagesDiv.innerHTML = '';
        
        if (data.error) {
          messagesDiv.innerHTML = `
            <div class="alert alert-danger mt-3">
              ${data.error}
            </div>
          `;
        }
        
        if (data.success) {
          messagesDiv.innerHTML = `
            <div class="alert alert-success mt-3">
              ${data.success}
            </div>
          `;
        }

        // Update cart content
        const cartContentDiv = document.getElementById('cartContent');
        
        if (!data.cart || data.cart.length === 0) {
          cartContentDiv.innerHTML = `
            <div class="text-center mt-4">
              <p class="mb-3"><%= __('your_cart_is_empty') %></p>
              <a href="/" class="btn"><%= __('browse_services') %></a>
            </div>
          `;
          return;
        }

        cartContentDiv.innerHTML = `
          <div class="table-responsive mt-3">
            <table class="table">
              <thead>
                <tr>
                  <th><%= __('service') %></th>
                  <th><%= __('quantity') %></th>
                  <th><%= __('price') %></th>
                  <th><%= __('total') %></th>
                  <th><%= __('actions') %></th>
                </tr>
              </thead>
              <tbody>
                ${data.cart.map((item, index) => `
                  <tr>
                    <td>
                      <div class="d-flex flex-column">
                        <strong>${item.name}</strong>
                        ${item.service_description ? `
                          <small class="text-muted">${item.service_description}</small>
                        ` : ''}
                        ${item.options && Object.keys(item.options).length > 0 ? `
                          <div class="mt-1">
                            ${Object.entries(item.options).map(([key, value]) => {
                              if (key !== 'file') {
                                return `<span class="badge bg-light text-dark me-1">${key}: ${value}</span>`;
                              }
                              return '';
                            }).join('')}
                          </div>
                        ` : ''}
                      </div>
                    </td>
                    <td>
                      <div class="d-flex align-items-center" style="gap: 0.5rem;">
                        <input type="number" class="form-control form-control-sm quantity-input" 
                               data-index="${index}" value="${item.quantity}" min="1" 
                               style="width: 70px;">
                        <button class="btn btn-sm update-quantity" data-index="${index}">
                          <%= __('update') %>
                        </button>
                      </div>
                    </td>
                    <td><%= __('currency_symbol') %>${item.price.toFixed(2)}</td>
                    <td><%= __('currency_symbol') %>${(item.quantity * item.price).toFixed(2)}</td>
                    <td>
                      <button class="btn btn-sm remove-item" data-index="${index}">
                        <%= __('remove') %>
                      </button>
                    </td>
                  </tr>
                `).join('')}
              </tbody>
              <tfoot>
                <tr>
                  <td colspan="3" class="text-end"><strong><%= __('total') %>:</strong></td>
                  <td colspan="2">
                    <strong><%= __('currency_symbol') %>${data.cartTotal.toFixed(2)}</strong>
                  </td>
                </tr>
              </tfoot>
            </table>
          </div>

          <div class="d-flex justify-content-between mt-4">
            <button class="btn clear-cart">
              <%= __('clear_cart') %>
            </button>
            <button class="btn checkout-btn">
              <%= __('proceed_to_checkout') %>
            </button>
          </div>
        `;

        // Add event listeners after content is loaded
        attachCartEventListeners();
      } catch (error) {
        console.error('Error loading cart:', error);
        document.getElementById('cartContent').innerHTML = `
          <div class="alert alert-danger mt-3">
            <%= __('error_loading_cart') %>
          </div>
        `;
      }
    }

    // Function to attach event listeners to cart elements
    function attachCartEventListeners() {
      // Update quantity buttons
      document.querySelectorAll('.update-quantity').forEach(button => {
        button.addEventListener('click', async function() {
          const index = this.dataset.index;
          const quantityInput = document.querySelector(`.quantity-input[data-index="${index}"]`);
          const quantity = quantityInput.value;

          try {
            const response = await fetch('/api/cart/update', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ index, quantity })
            });

            if (!response.ok) {
              throw new Error('<%= __("error_update_cart") %>');
            }

            // Reload cart data after successful update
            loadCartData();
          } catch (error) {
            console.error('Error updating quantity:', error);
            showStatusMessage('<%= __("error_update_cart") %>', false);
          }
        });
      });

      // Remove item buttons
      document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', async function() {
          const index = this.dataset.index;

          try {
            const response = await fetch('/api/cart/remove', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ index })
            });

            if (!response.ok) {
              throw new Error('<%= __("error_remove_item") %>');
            }

            // Reload cart data after successful removal
            loadCartData();
          } catch (error) {
            console.error('Error removing item:', error);
            showStatusMessage('<%= __("error_remove_item") %>', false);
          }
        });
      });

      // Clear cart button
      document.querySelector('.clear-cart')?.addEventListener('click', async function() {
        if (!confirm('<%= __("confirm_clear_cart") %>')) {
          return;
        }

        try {
          const response = await fetch('/api/cart/clear', {
            method: 'POST'
          });

          if (!response.ok) {
            throw new Error('<%= __("error_clear_cart") %>');
          }

          // Reload cart data after successful clear
          loadCartData();
        } catch (error) {
          console.error('Error clearing cart:', error);
          showStatusMessage('<%= __("error_clear_cart") %>', false);
        }
      });

      // Checkout button
      document.querySelector('.checkout-btn')?.addEventListener('click', async function() {
        try {
          // Show loading message
          const loadingMessage = document.createElement('div');
          loadingMessage.className = 'alert alert-info mt-3';
          loadingMessage.textContent = '<%= __("redirecting_to_stripe") %>';
          document.getElementById('cartMessages').appendChild(loadingMessage);

          // Create checkout session
          const response = await fetch('/checkout/create-checkout-session', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          if (!response.ok) {
            throw new Error('<%= __("checkout_error") %>');
          }

          const { url } = await response.json();
          window.location.href = url;
        } catch (error) {
          console.error('Error initiating checkout:', error);
          showStatusMessage('<%= __("checkout_error") %>', false);
        }
      });
    }

    // Load cart data when switching to cart tab
    document.addEventListener('DOMContentLoaded', function() {
      const tabLinks = document.querySelectorAll('.nav-link');
      
      tabLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          if (this.getAttribute('href') === '#cart') {
            loadCartData();
          }
        });
      });
      
      // Load cart data if cart tab is active on page load
      if (window.location.hash === '#cart') {
        loadCartData();
      }
    });

    // Orders functionality
    async function loadOrdersData() {
      try {
        const response = await fetch('/checkout/user-orders');
        const data = await response.json();
        
        const ordersContentDiv = document.getElementById('ordersContent');
        
        if (!data.success) {
          ordersContentDiv.innerHTML = `
            <div class="alert alert-danger mt-3">
              ${data.error || '<%= __("error_loading_orders") %>'}
            </div>
          `;
          return;
        }

        if (!data.orders || data.orders.length === 0) {
          ordersContentDiv.innerHTML = `
            <div class="text-center mt-4">
              <p class="mb-3"><%= __('no_orders_yet') %></p>
              <a href="/" class="btn"><%= __('browse_services') %></a>
            </div>
          `;
          return;
        }

        // Store translations in variables to avoid repetition
        const translations = {
          order_id: '<%= __("order_id") %>',
          date: '<%= __("date") %>',
          status: '<%= __("status") %>',
          payment_status: '<%= __("payment_status") %>',
          total: '<%= __("total") %>',
          details: '<%= __("details") %>',
          view_details: '<%= __("view_details") %>',
          order_items: '<%= __("order_items") %>',
          service: '<%= __("service") %>',
          quantity: '<%= __("quantity") %>',
          price: '<%= __("price") %>',
          subtotal: '<%= __("subtotal") %>',
          currency_symbol: '<%= __("currency_symbol") %>',
          option_filename: '<%= __("option_filename") %>',
          option_pages: '<%= __("option_pages") %>',
          option_color: '<%= __("option_color") %>',
          option_paper_size: '<%= __("option_paper_size") %>',
          option_double_sided: '<%= __("option_double_sided") %>',
          pages_all: '<%= __("pages_all") %>',
          color_black_white: '<%= __("color_black_white") %>',
          color_color: '<%= __("color_color") %>',
          double_sided_yes: '<%= __("double_sided_yes") %>',
          double_sided_no: '<%= __("double_sided_no") %>',
          paper_size_a4: '<%= __("paper_size_a4") %>',
          paper_size_a3: '<%= __("paper_size_a3") %>',
          paper_size_letter: '<%= __("paper_size_letter") %>',
          status_pending: '<%= __("status_pending") %>',
          status_processing: '<%= __("status_processing") %>',
          status_completed: '<%= __("status_completed") %>',
          status_cancelled: '<%= __("status_cancelled") %>',
          payment_status_completed: '<%= __("payment_status_completed") %>',
          payment_status_pending: '<%= __("payment_status_pending") %>',
          payment_status_failed: '<%= __("payment_status_failed") %>',
          custom_tshirt: '<%= __("custom_tshirt") %>',
          custom_tshirt_desc: '<%= __("custom_tshirt_desc") %>',
          option_size: '<%= __("option_size") %>',
          size_small: '<%= __("size_small") %>',
          size_medium: '<%= __("size_medium") %>',
          size_large: '<%= __("size_large") %>'
        };

        ordersContentDiv.innerHTML = `
          <div class="table-responsive mt-3">
            <table class="table">
              <thead>
                <tr>
                  <th>${translations.order_id}</th>
                  <th>${translations.date}</th>
                  <th>${translations.status}</th>
                  <th>${translations.payment_status}</th>
                  <th>${translations.total}</th>
                  <th>${translations.details}</th>
                </tr>
              </thead>
              <tbody>
                ${data.orders.map(order => `
                  <tr>
                    <td>#${order.id}</td>
                    <td>${formatDate(order.created_at, document.documentElement.lang)}</td>
                    <td>
                      <span class="badge bg-${getStatusColor(order.status)}">
                        ${getTranslatedStatus(order.status, translations)}
                      </span>
                    </td>
                    <td>
                      <span class="badge bg-${getPaymentStatusColor(order.payment_status)}">
                        ${getTranslatedPaymentStatus(order.payment_status, translations)}
                      </span>
                    </td>
                    <td>${translations.currency_symbol}${formatPrice(order.total_price)}</td>
                    <td>
                      <div class="d-flex flex-column gap-2">
                        <button class="btn btn-sm" onclick="toggleOrderDetails(${order.id})">
                          ${translations.view_details}
                        </button>
                        ${order.receipt_url ? `
                          <a href="${order.receipt_url}" target="_blank" class="btn btn-sm">
                            <%= __('view_receipt') %>
                          </a>
                        ` : ''}
                      </div>
                    </td>
                  </tr>
                  <tr id="details-${order.id}" class="order-details" style="display: none;">
                    <td colspan="6">
                      <div class="p-3 bg-light">
                        <h6>${translations.order_items}:</h6>
                        <div class="table-responsive">
                          <table class="table table-sm">
                            <thead>
                              <tr>
                                <th>${translations.service}</th>
                                <th>${translations.quantity}</th>
                                <th>${translations.price}</th>
                                <th>${translations.subtotal}</th>
                              </tr>
                            </thead>
                            <tbody>
                              ${order.items.map(item => `
                                <tr>
                                  <td>
                                    <div>
                                      <strong>${item.options.type === 'merch' ? translations.custom_tshirt : item.service_name}</strong>
                                      ${item.options.type === 'merch' ? `
                                        <small class="text-muted d-block">${translations.custom_tshirt_desc}</small>
                                      ` : ''}
                                      ${Object.entries(item.options)
                                        .filter(([key]) => !['file', 'type', 'item_name', 'item_description'].includes(key))
                                        .map(([key, value]) => {
                                          let translatedKey;
                                          let translatedValue;
                                          
                                          switch(key) {
                                            case 'filename':
                                              translatedKey = translations.option_filename;
                                              translatedValue = value;
                                              break;
                                            case 'pages':
                                              translatedKey = translations.option_pages;
                                              translatedValue = value === 'All' ? translations.pages_all : value;
                                              break;
                                            case 'color':
                                              translatedKey = translations.option_color;
                                              translatedValue = value === 'Black & White' ? translations.color_black_white : translations.color_color;
                                              break;
                                            case 'paper_size':
                                              translatedKey = translations.option_paper_size;
                                              translatedValue = translations[`paper_size_${value.toLowerCase()}`] || value;
                                              break;
                                            case 'double_sided':
                                              translatedKey = translations.option_double_sided;
                                              translatedValue = value === 'Yes' ? translations.double_sided_yes : translations.double_sided_no;
                                              break;
                                            case 'size':
                                              translatedKey = translations['option_size'] || 'Size';
                                              translatedValue = translations[`size_${value.toLowerCase()}`] || value;
                                              break;
                                            default:
                                              translatedKey = translations[`option_${key}`] || translations[key] || key;
                                              translatedValue = value;
                                          }
                                          
                                          return `<br><small>${translatedKey}: ${translatedValue}</small>`;
                                        }).join('')}
                                    </div>
                                  </td>
                                  <td>${item.quantity}</td>
                                  <td>${translations.currency_symbol}${formatPrice(item.price)}</td>
                                  <td>${translations.currency_symbol}${formatPrice(item.subtotal)}</td>
                                </tr>
                              `).join('')}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </td>
                  </tr>
                `).join('')}
              </tbody>
            </table>
          </div>
        `;
      } catch (error) {
        console.error('Error loading orders:', error);
        document.getElementById('ordersContent').innerHTML = `
          <div class="alert alert-danger mt-3">
            <%= __('error_loading_orders') %>
          </div>
        `;
      }
    }

    function getStatusColor(status) {
      const statusColors = {
        'Pending': 'warning',
        'Processing': 'info',
        'Completed': 'success',
        'Cancelled': 'danger'
      };
      return statusColors[status] || 'secondary';
    }

    function getPaymentStatusColor(status) {
      const statusColors = {
        'completed': 'success',
        'pending': 'warning',
        'failed': 'danger'
      };
      return statusColors[status] || 'secondary';
    }

    function getTranslatedStatus(status, translations) {
      const statusMap = {
        'Pending': translations.status_pending,
        'Processing': translations.status_processing,
        'Completed': translations.status_completed,
        'Cancelled': translations.status_cancelled
      };
      return statusMap[status] || status;
    }

    function getTranslatedPaymentStatus(status, translations) {
      const statusMap = {
        'completed': translations.payment_status_completed,
        'pending': translations.payment_status_pending,
        'failed': translations.payment_status_failed
      };
      return statusMap[status] || status;
    }

    function toggleOrderDetails(orderId) {
      const detailsRow = document.getElementById(`details-${orderId}`);
      if (detailsRow) {
        detailsRow.style.display = detailsRow.style.display === 'none' ? 'table-row' : 'none';
      }
    }

    // Load orders data when switching to orders tab
    document.addEventListener('DOMContentLoaded', function() {
      const tabLinks = document.querySelectorAll('.nav-link');
      
      tabLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          if (this.getAttribute('href') === '#orders') {
            loadOrdersData();
          }
        });
      });
      
      // Load orders data if orders tab is active on page load
      if (window.location.hash === '#orders') {
        loadOrdersData();
      }
    });
  </script>
</body>
</html>