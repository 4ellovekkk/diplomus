
// router.get("/profile", verifyTokenExceptLogin, async (req, res) => {
//   try {
//     // Decode the JWT token to get the user ID
//     const decoded = jwt.verify(req.cookies.token, process.env.JWT_SECRET);

//     // Fetch the user from SQL DB (Prisma)
//     const user = await prisma.users.findUnique({
//       where: { id: decoded.userId },
//       include: { orders: true }, // Include user's orders
//     });

//     if (!user) {
//       return res.status(404).render("error", {
//         errorTitle: "User not found",
//         errorMessage: "Check if user credentials you provided are correct",
//         errorDetails: { code: 404, info: "Not found" },
//       });
//     }

//     // Fetch user's avatar from MongoDB (Mongoose)
//     const avatarDoc = await Avatar.findOne({ userId: user.id });

//     let avatarBase64 = null;
//     if (avatarDoc && avatarDoc.data) {
//       avatarBase64 = `data:${avatarDoc.contentType};base64,${avatarDoc.data.toString("base64")}`;
//     }

//     // Get cart data and fetch service details
//     const cart = req.session.cart || [];

//     // Create a display version of the cart without design data
//     const displayCart = cart.map((item, index) => {
//       if (item.type === 'merch' && item.options) {
//         const displayItem = { ...item };
//         displayItem.options = { ...item.options };
//         // Replace design data with a view button
//         if (displayItem.options.design) {
//           displayItem.options.viewButton = `<button onclick="window.open('/cart-design/${index}', '_blank', 'width=600,height=600')">View Design</button>`;
//           delete displayItem.options.design;
//         }
//         return displayItem;
//       }
//       return item;
//     });

//     console.log('Display Cart:', displayCart);
//     const cartWithDetails = await Promise.all(
//       displayCart.map(async (item) => {
//         // For merchandise items, return as is since it's already filtered
//         if (item.type === 'merch') {
//           return item;
//         }

//         // For service items, fetch additional details
//         if (item.service_id) {
//           const service = await prisma.services.findUnique({
//             where: { id: item.service_id },
//           });
//           return {
//             ...item,
//             service_description: service ? service.description : null
//           };
//         }

//         // Default case - return item as is
//         return item;
//       })
//     );

//     const { total: cartTotal, itemCount } = calculateCartTotals(cartWithDetails);

//     // Get cart messages from session and clear them
//     const cartSuccess = req.session.cartSuccess;
//     const cartError = req.session.cartError;
//     delete req.session.cartSuccess;
//     delete req.session.cartError;

//     // If there's a cart hash parameter, switch to cart tab
//     const activeTab = req.query.tab || (req.url.includes('#cart') ? 'cart' : 'profile');

//     // Final cleanup of cart data before rendering
//     const cleanCart = cartWithDetails.map((item, index) => {
//       if (item.type === 'merch' && item.options) {
//         const cleanItem = { ...item };
//         cleanItem.options = { ...item.options };
//         // Replace design data with a view button
//         if (cleanItem.options.design) {
//           cleanItem.options.viewButton = `<button onclick="window.open('/cart-design/${index}', '_blank', 'width=600,height=600')">View Design</button>`;
//           delete cleanItem.options.design;
//         }
//         return cleanItem;
//       }
//       return item;
//     });

//     // Render the profile template with all data
//     res.render("profile", {
//       user,
//       cart: cleanCart,
//       cartTotal,
//       itemCount,
//       cartSuccess,
//       cartError,
//       avatar: avatarBase64,
//       locale: res.locals.locale,
//       activeTab
//     });
//   } catch (error) {
//     if (error.name === "JsonWebTokenError" || error.name === "TokenExpiredError") {
//       return res.status(401).json({ message: "Unauthorized: Invalid or expired token." });
//     }

//     console.error("Error retrieving user profile:", error);
//     return res.status(500).json({ message: "Internal server error." });
//   }
// });
